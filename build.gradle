buildscript {
    ext {
        springBootVersion = '2.1.6.RELEASE'
        mooworkVersion = '1.2.0'
        kotlinVersion = '1.3.61'
        jacksonVersion = '2.9.6'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("com.moowork.gradle:gradle-node-plugin:${mooworkVersion}")
        // Kotlin Language
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        // DI support
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        // JPA(Hibernate) no arg support
        classpath "org.jetbrains.kotlin:kotlin-noarg:${kotlinVersion}"
    }
}

//plugins {
//    id 'org.springframework.boot' version '2.1.6.RELEASE'
//    id 'kotln'
//}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'kotlin-jpa'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.moowork.node'
apply plugin: 'application'

mainClassName = 'app.ssnc.io.oasis.OasisApplication'
group = 'app.ssnc.io'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

repositories {
    mavenCentral()
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    // Kotlin Support
    compile('com.fasterxml.jackson.module:jackson-module-kotlin')
    compile('org.jetbrains.kotlin:kotlin-stdlib-jdk8')
    compile('org.jetbrains.kotlin:kotlin-reflect')

    // Kotlin 1.2 reflection support
    compile("com.fasterxml.jackson.module:jackson-module-kotlin:${jacksonVersion}")
    compile('com.fasterxml.jackson.datatype:jackson-datatype-jsr310')

    // log
    compile('io.github.microutils:kotlin-logging:1.6.10')

    //jsonType
    implementation "com.vladmihalcea:hibernate-types-52:2.2.0"

    //jwt
    implementation 'io.jsonwebtoken:jjwt:0.9.1'

    //postgre
    implementation 'org.postgresql:postgresql'

    //string
    compile("org.apache.commons:commons-lang3")

    // walllbrain
    compile files('lib/wallbrain-base-1.0.0-SNAPSHOT.jar')
    compile files('lib/wallbrain-utils-1.0.0-SNAPSHOT.jar')

    //swagger
    implementation("io.springfox:springfox-swagger-ui:2.9.2")
    implementation("io.springfox:springfox-swagger2:2.9.2")

    compile group: 'commons-codec', name: 'commons-codec', version: '1.5'

    // https://mvnrepository.com/artifact/com.fasterxml.jackson.datatype/jackson-datatype-joda
    compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-joda', version: '2.0.4'
    // https://mvnrepository.com/artifact/net.sf.json-lib/json-lib
    compile group: 'net.sf.json-lib', name: 'json-lib', version: '2.4', classifier: 'jdk15'
    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    compile group: 'com.google.code.gson', name: 'gson', version: '2.7'

    compileOnly 'org.projectlombok:lombok'
    compile 'com.h2database:h2'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    compile group: 'it.ozimov', name: 'embedded-redis', version: '0.7.2'
}

def webappDir = "$projectDir/frontend"

node {
    version = '12.6.0'
    download=true
    workDir = file("${project.buildDir}/nodejs")
    npmWorkDir=file("${project.buildDir}/npm")
}

task appNpmInstall(type: NpmTask) {
    workingDir = file("${project.projectDir}/frontend")
    args = ["install"]
}

task yarnBuild(type: YarnTask) {
    workingDir = file("${project.projectDir}/frontend")
    args = ['build:local']
}

task yarnStart(type: YarnTask) {
    workingDir = file("${project.projectDir}/frontend")
    args = ['start:local']
}

task copyWebApp(type: Copy) {
    from "frontend/build"
    into 'build/resources/main/static/.'
}

//task startWebApp(type: StartTask) {
//    workingDir = file("${project.projectDir}/frontend")
//    args = ["start:local"]
//}

yarnBuild.dependsOn appNpmInstall
copyWebApp.dependsOn yarnBuild
//compileJava.dependsOn copyWebApp
//startWebApp.dependsOn appNpmInstall
