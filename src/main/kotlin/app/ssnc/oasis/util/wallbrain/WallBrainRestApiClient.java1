package app.ssnc.io.oasis.util.wallbrain;


import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import javax.xml.bind.DatatypeConverter;

import com.google.common.collect.Lists;
import com.sds.wallbrain.base.*;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.http.client.ClientHttpRequestFactory;
import org.springframework.http.client.SimpleClientHttpRequestFactory;
import org.springframework.http.converter.HttpMessageConverter;
import org.springframework.http.converter.StringHttpMessageConverter;
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
import org.springframework.stereotype.Component;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriComponents;
import org.springframework.web.util.UriComponentsBuilder;

import com.sds.wallbrain.base.converter.JsonConverter;
import com.sds.wallbrain.base.it4u.FwRequestInfoGroup;

import lombok.extern.slf4j.Slf4j;

@Component
@Slf4j
public class WallBrainRestApiClient {
    private static final Logger log = LoggerFactory.getLogger(WallBrainRestApiClient.class);

    private static final String ApiSubUrl = "%s.json";

    @Autowired @Lazy
    private WallBrainApiConfigHolder configHolder;

    private String base64Encode(String message)
            throws UnsupportedEncodingException {

        return DatatypeConverter.printBase64Binary(message.getBytes("UTF-8"));
    }

    public String toBase64Encode(String credential) {
        String base64Encoded = credential;

        try {
            base64Encoded = base64Encode(credential);
        } catch (UnsupportedEncodingException e) {
            log.error("can not encoding base64 : ", credential, e);
        }
        return base64Encoded;
    }


    public ClientHttpRequestFactory clientHttpRequestFactory() {
        SimpleClientHttpRequestFactory factory = new SimpleClientHttpRequestFactory();
        factory.setReadTimeout(30*60*1000);
        factory.setConnectTimeout(5000);
        return factory;
    }


    public RestTemplate getRestTemplate() {
        RestTemplate restTemplate = new RestTemplate(clientHttpRequestFactory());
        //RestTemplate restTemplate = new RestTemplate();
        List<HttpMessageConverter<?>> messageConverters = new ArrayList<HttpMessageConverter<?>>();

        {
            StringHttpMessageConverter converter = new StringHttpMessageConverter();

            messageConverters.add(converter);
        }

        {
            List<MediaType> supportedjsonMediaTypes = new ArrayList<MediaType>();

            supportedjsonMediaTypes.add(MediaType.APPLICATION_JSON);
            supportedjsonMediaTypes.add(MediaType.TEXT_HTML);

            MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter();

            converter.setObjectMapper(JsonConverter.getObjectMapper(false));

            converter.setSupportedMediaTypes(supportedjsonMediaTypes);

            messageConverters.add(converter);
        }

        restTemplate.setMessageConverters(messageConverters);

        return restTemplate;
    }

    public void setTarget(String host, int port) {
        configHolder.setBaseUrl(host);
    }

    public String getBaseUrl() {
        return configHolder.getBaseUrl();
    }

    public URI getUri(String wsHost, String wsPort, String path){
        UriComponents baseUri = UriComponentsBuilder.newInstance()
                .scheme("http")
                .host(wsHost)
                .port(wsPort)
                .path(path).build().encode();

        return baseUri.toUri();

    }

    public HttpHeaders getRequestHeader(String userCredential) {
        HttpHeaders requestHeaders = new HttpHeaders();
        requestHeaders.set("Authorization", "Basic " + toBase64Encode(userCredential));
        requestHeaders.add("Content-Type", MediaType.APPLICATION_JSON_VALUE + "; charset=UTF-8");
        return requestHeaders;
    }

    public HttpHeaders getRequestHeader() {
        return getRequestHeader(configHolder.getUserCredential());
    }

    public HttpEntity<String> getRequestWithCredential() {
        MultiValueMap<String, String> parameters = new LinkedMultiValueMap<String, String>();
        parameters.add("Authorization", "Basic " + toBase64Encode(configHolder.getUserCredential()));
        parameters.add("Content-Type", MediaType.APPLICATION_JSON_VALUE + "; charset=UTF-8");

        HttpEntity<String> request = new HttpEntity<String>(parameters);
        return request;
    }


    public String getTarget() {
        return configHolder.getBaseUrl();
    }

    public  RuleSetGroupInfoVo getRuleSetGroup(String apiUrl) {
        RestTemplate restTemplate = getRestTemplate();
        HttpEntity<String> request = getRequestWithCredential();


        ResponseEntity<RuleSetGroupInfoVo> response = restTemplate.exchange(configHolder.getBaseUrl()
                        + String.format(ApiSubUrl, apiUrl), HttpMethod.GET, request,
                RuleSetGroupInfoVo.class);

        return response.getBody();
    }


    public  RuleSetGroupInfoVo[] searchRuleSetGroup(String apiUrl,  MultiValueMap<String, String> urlParameters) {
        RestTemplate restTemplate = getRestTemplate();
        HttpEntity<String> request = getRequestWithCredential();

        UriComponentsBuilder uriComponentBuilder = UriComponentsBuilder.fromHttpUrl(configHolder.getBaseUrl() + String.format(ApiSubUrl, apiUrl));

        if (urlParameters != null) {
            uriComponentBuilder.queryParams(urlParameters) ;
        }

        ResponseEntity<RuleSetGroupInfoVo[]> response = restTemplate.exchange(
                uriComponentBuilder.build().encode().toUri(), HttpMethod.GET, request,
                RuleSetGroupInfoVo[].class);

        return response.getBody();
    }

    public  RuleSetGroupInfoVo[] searchRul(MultiValueMap<String, String> urlParameters) {
        RestTemplate restTemplate = getRestTemplate();
        HttpEntity<String> request = getRequestWithCredential();

        UriComponentsBuilder uriComponentBuilder = UriComponentsBuilder.fromHttpUrl(configHolder.getBaseUrl() + String.format(ApiSubUrl, "/provision/rule/search"));

        if (urlParameters != null) {
            uriComponentBuilder.queryParams(urlParameters) ;
        }

        ResponseEntity<RuleSetGroupInfoVo[]> response = restTemplate.exchange(
                uriComponentBuilder.build().encode().toUri(), HttpMethod.GET, request,
                RuleSetGroupInfoVo[].class);

        return response.getBody();
    }
    public  Integer countRuleSetGroup(String apiUrl,  MultiValueMap<String, String> urlParameters) {
        RestTemplate restTemplate = getRestTemplate();
        HttpEntity<String> request =getRequestWithCredential();

        UriComponentsBuilder uriComponentBuilder = UriComponentsBuilder.fromHttpUrl(configHolder.getBaseUrl() + String.format(ApiSubUrl, apiUrl));

        if (urlParameters != null) {
            uriComponentBuilder.queryParams(urlParameters) ;
        }

        ResponseEntity<Integer> response = restTemplate.exchange(
                uriComponentBuilder.build().encode().toUri(), HttpMethod.GET, request,
                Integer.class);

        return response.getBody();
    }

    /**
     * 등록
     * @param apiUrl
     * @param requestObject (RuleSetGroupInfoVo 등록 ruleset 정보)
     * @return
     */
    public RuleSetGroupInfoVo postRuleSetGroup(String apiUrl, RuleSetGroupInfoVo requestObject, boolean isSyncMode) {

        RestTemplate restTemplate = getRestTemplate();

        HttpHeaders requestHeaders = getRequestHeader();

        HttpEntity<Object> request = new HttpEntity<Object>(
                JsonConverter.convertObjectToJsonString(requestObject, false),
                requestHeaders);

        ResponseEntity<RuleSetGroupInfoVo> response = restTemplate.exchange(
                configHolder.getBaseUrl() + String.format(ApiSubUrl, apiUrl) +"?syncMode="+ isSyncMode, HttpMethod.POST, request,
                RuleSetGroupInfoVo.class);

        return response.getBody();

    }

    public RuleSetGroupInfoVo postRuleSetGroup(String apiUrl, RuleSetGroupInfoVo requestObject) {
        return postRuleSetGroup(apiUrl, requestObject, true);
    }

    /**
     * 연장
     * @param apiUrl
     * @param requestObject
     * @return
     */
    public RuleSetGroupInfoVo putRuleSetGroup(String apiUrl, RuleSetGroupInfoVo requestObject) {

        RestTemplate restTemplate = getRestTemplate();

        HttpHeaders requestHeaders = getRequestHeader();

        HttpEntity<Object> request = new HttpEntity<Object>(
                JsonConverter.convertObjectToJsonString(requestObject, false),
                requestHeaders);

        ResponseEntity<RuleSetGroupInfoVo> response = restTemplate.exchange(
                configHolder.getBaseUrl() + String.format(ApiSubUrl, apiUrl), HttpMethod.PUT, request,
                RuleSetGroupInfoVo.class);

        return response.getBody();

    }


    /**
     * misId 로 해지
     * @param apiUrl
     * @return RuleSetGroupInfoVo
     */
    public RuleSetGroupInfoVo unregisterRuleSetGroup(String apiUrl) {

        RestTemplate restTemplate = getRestTemplate();

        HttpHeaders requestHeaders = getRequestHeader();

        HttpEntity<Object> request = new HttpEntity<Object>(requestHeaders);

        ResponseEntity<RuleSetGroupInfoVo> response = restTemplate.exchange(
                configHolder.getBaseUrl() + String.format(ApiSubUrl, apiUrl), HttpMethod.DELETE, request,
                RuleSetGroupInfoVo.class);

        return response.getBody();

    }


    public RuleSetGroupInfoVo registerRuleSet (String misId, RuleSetGroupInfoVo ruleSetGroupInfoVo) {

        String apiUrl = String.format("/rule/%s", misId);

        RestTemplate restTemplate = getRestTemplate();

        HttpHeaders requestHeaders = getRequestHeader();

        HttpEntity<Object> request = new HttpEntity<Object>(
                JsonConverter.convertObjectToJsonString(ruleSetGroupInfoVo, false),
                requestHeaders);

        log.debug("request  [{}]", request );

        ResponseEntity<RuleSetGroupInfoVo> response = restTemplate.exchange(
                configHolder.getBaseUrl() + String.format(ApiSubUrl, apiUrl), HttpMethod.POST, request,
                RuleSetGroupInfoVo.class);

        log.debug("response  [{}]", response );
        return response.getBody();

    }

    public RuleSetGroupInfoVo discoverRuleSet (String misId, RuleSetGroupInfoVo ruleSetGroupInfoVo) {

        String apiUrl = String.format("/rule/%s/discover", misId);

        RestTemplate restTemplate = getRestTemplate();

        HttpHeaders requestHeaders = getRequestHeader();

        HttpEntity<Object> request = new HttpEntity<Object>(
                JsonConverter.convertObjectToJsonString(ruleSetGroupInfoVo, false),
                requestHeaders);

        ResponseEntity<RuleSetGroupInfoVo> response = restTemplate.exchange(
                configHolder.getBaseUrl() + String.format(ApiSubUrl, apiUrl), HttpMethod.POST, request,
                RuleSetGroupInfoVo.class);

        return response.getBody();

    }

    public RuleSetGroupInfoVo getRuleSetStatus(String misId) {

        String apiUrl = String.format("/rule/%s/status", misId);

        RestTemplate restTemplate = getRestTemplate();

        HttpEntity<String> request = getRequestWithCredential();

        ResponseEntity<RuleSetGroupInfoVo> response = restTemplate.exchange(
                configHolder.getBaseUrl() + String.format(ApiSubUrl, apiUrl),
                HttpMethod.GET, request, RuleSetGroupInfoVo.class);

        return response.getBody();

    }

    public RuleSetGroupInfoVo getRuleSet(String misId) {

        String apiUrl = String.format("/rule/%s", misId);

        RestTemplate restTemplate = getRestTemplate();

        HttpEntity<String> request = getRequestWithCredential();

        ResponseEntity<RuleSetGroupInfoVo> response = restTemplate.exchange(
                configHolder.getBaseUrl() + String.format(ApiSubUrl, apiUrl),
                HttpMethod.GET, request, RuleSetGroupInfoVo.class);

        return response.getBody();

    }


    public RuleSetGroupInfoVo getRuleSetByRuleSetId(String ruleSetId) {
        String apiUrl = String.format("/ruleset/%s", ruleSetId);

        RestTemplate restTemplate = getRestTemplate();
        HttpEntity<String> request = getRequestWithCredential();

        ResponseEntity<RuleSetGroupInfoVo> response = restTemplate.exchange(
                configHolder.getBaseUrl() + String.format(ApiSubUrl, apiUrl),
                HttpMethod.GET, request, RuleSetGroupInfoVo.class);

        return response.getBody();
    }

    public RuleSetGroupInfoVo confirmRuleSet(String ruleSetId) {

        String apiUrl = String.format("/ruleset/%s/confirm", ruleSetId);

        RestTemplate restTemplate = getRestTemplate();

        HttpHeaders requestHeaders = getRequestHeader();

        HttpEntity<Object> request = new HttpEntity<Object>(requestHeaders);

        ResponseEntity<RuleSetGroupInfoVo> response = restTemplate.exchange(
                configHolder.getBaseUrl() + String.format(ApiSubUrl, apiUrl),
                HttpMethod.PUT, request, RuleSetGroupInfoVo.class);

        return response.getBody();

    }

    public RuleSetGroupInfoVo commitRuleSet(String ruleSetId) {

        String apiUrl = String.format("/ruleset/%s/commit", ruleSetId);

        RestTemplate restTemplate = getRestTemplate();

        HttpHeaders requestHeaders = getRequestHeader();

        HttpEntity<Object> request = new HttpEntity<Object>(requestHeaders);

        ResponseEntity<RuleSetGroupInfoVo> response = restTemplate.exchange(
                configHolder.getBaseUrl() + String.format(ApiSubUrl, apiUrl),
                HttpMethod.PUT, request, RuleSetGroupInfoVo.class);

        return response.getBody();

    }


    public RuleSetGroupInfoVo syncRuleSet(String ruleSetId) {

        String apiUrl = String.format("/ruleset/%s/sync", ruleSetId);

        RestTemplate restTemplate = getRestTemplate();

        HttpHeaders requestHeaders = getRequestHeader();

        HttpEntity<Object> request = new HttpEntity<Object>(requestHeaders);

        ResponseEntity<RuleSetGroupInfoVo> response = restTemplate.exchange(
                configHolder.getBaseUrl() + String.format(ApiSubUrl, apiUrl),
                HttpMethod.PUT, request, RuleSetGroupInfoVo.class);

        return response.getBody();

    }


    public FwRequestInfoGroup syncFirewallRequestInfo(FwRequestInfoGroup fwReqeustInfoGroup) {

        String apiUrl = String.format("/rule/all/sync");

        RestTemplate restTemplate = getRestTemplate();

        HttpHeaders requestHeaders = getRequestHeader();

        HttpEntity<Object> request = new HttpEntity<Object>(
                JsonConverter.convertObjectToJsonString(fwReqeustInfoGroup, false),
                requestHeaders);

        ResponseEntity<FwRequestInfoGroup> response = restTemplate.exchange(
                configHolder.getBaseUrl() + String.format(ApiSubUrl, apiUrl), HttpMethod.POST, request,
                FwRequestInfoGroup.class);

        return response.getBody();

    }


    public RuleSetGroupInfoVo replicateFirewallRuleSetGroupInfo(String firewallName, RuleSetGroupInfoVo ruleSetGroupInfoVo) {

        String apiUrl = String.format("/rule/all/replicate");

        RestTemplate restTemplate = getRestTemplate();

        HttpHeaders requestHeaders = getRequestHeader();


        UriComponentsBuilder uriComponentBuilder = UriComponentsBuilder.fromHttpUrl(configHolder.getBaseUrl() + String.format(ApiSubUrl, apiUrl));

        if (!StringUtils.isEmpty(firewallName)) {
            uriComponentBuilder.queryParam("firewall", firewallName);
        }

        log.debug("firewall : {} url {}", firewallName, uriComponentBuilder.build().encode().toUri());

        HttpEntity<Object> request = new HttpEntity<Object>(
                JsonConverter.convertObjectToJsonString(ruleSetGroupInfoVo, false),
                requestHeaders);


        ResponseEntity<RuleSetGroupInfoVo> response = restTemplate.exchange(
                uriComponentBuilder.build().encode().toUri(), HttpMethod.POST, request,
                RuleSetGroupInfoVo.class);

        return response.getBody();

    }


    public FwCompartInfoGroup syncFirewallCompartInfo(FwCompartInfoGroup fwCompartInfoGroup) {

        String apiUrl = String.format("/ruledetail/compartment/all/sync");

        RestTemplate restTemplate = getRestTemplate();

        HttpHeaders requestHeaders = getRequestHeader();

        HttpEntity<Object> request = new HttpEntity<Object>(
                JsonConverter.convertObjectToJsonString(fwCompartInfoGroup, false),
                requestHeaders);

        ResponseEntity<FwCompartInfoGroup> response = restTemplate.exchange(
                configHolder.getBaseUrl() + String.format(ApiSubUrl, apiUrl), HttpMethod.POST, request,
                FwCompartInfoGroup.class);

        return response.getBody();

    }


    public FirewallInfoVo registerFirewall(FirewallInfoVo firewallInfoVo) {

        String apiUrl = String.format("/firewall/");

        RestTemplate restTemplate = getRestTemplate();

        HttpHeaders requestHeaders = getRequestHeader();


        HttpEntity<Object> request = new HttpEntity<Object>(
                JsonConverter.convertObjectToJsonString(firewallInfoVo, false),
                requestHeaders);

        ResponseEntity<FirewallInfoVo> response = restTemplate.exchange(
                configHolder.getBaseUrl() + String.format(ApiSubUrl, apiUrl), HttpMethod.POST, request,
                FirewallInfoVo.class);

        return response.getBody();
    }

    public List<FirewallInfoVo> getFirewalls() {

        String apiUrl = "/firewall/all/list";

        RestTemplate restTemplate = getRestTemplate();

        HttpEntity<String> request = getRequestWithCredential();

        ResponseEntity<List<FirewallInfoVo>> response = restTemplate.exchange(
                configHolder.getBaseUrl() + String.format(ApiSubUrl, apiUrl), HttpMethod.GET, request,
                new ParameterizedTypeReference<List<FirewallInfoVo>>() {});

        return response.getBody();
    }

    public List<SystemInfoVo> getNodeSystems() {
        String apiUrl = String.format("/provision/nodeSystem/list");

        RestTemplate restTemplate = getRestTemplate();

        HttpEntity<String> request = getRequestWithCredential();

        ResponseEntity<List<SystemInfoVo>> response = restTemplate.exchange(
                configHolder.getBaseUrl() + String.format(ApiSubUrl, apiUrl), HttpMethod.GET, request,
                new ParameterizedTypeReference<List<SystemInfoVo>>() {});

        return response.getBody();
    }

    public List<NowSessionsInfoVo> updateSessionRuleSet(List<NowSessionsInfoVo> nowSessinInfoVos) {
        // /provision/rule/update.json

        String apiUrl = String.format("/provision/rule/update");

        RestTemplate restTemplate = getRestTemplate();

        HttpHeaders requestHeaders = getRequestHeader();

        HttpEntity<Object> request = new HttpEntity<Object>(
                JsonConverter.convertObjectToJsonString(nowSessinInfoVos, false),
                requestHeaders);

        ResponseEntity<List<NowSessionsInfoVo>> response = restTemplate.exchange(
                configHolder.getBaseUrl() + String.format(ApiSubUrl, apiUrl), HttpMethod.POST, request,
                new ParameterizedTypeReference<List<NowSessionsInfoVo>>() {});

        return response.getBody();

    }


    public List<NowSessionsInfoVo> getIDBasedFirewallBySecurityName(List<NowSessionsInfoVo> nowSessionsInfoVos) {

        String apiUrl = String.format("/provision/firewall/list");

        RestTemplate restTemplate = getRestTemplate();

        HttpHeaders requestHeaders = getRequestHeader();

        HttpEntity<Object> request = new HttpEntity<Object>(
                JsonConverter.convertObjectToJsonString(nowSessionsInfoVos, false),
                requestHeaders);

        ResponseEntity<List<NowSessionsInfoVo>> response = restTemplate.exchange(
                configHolder.getBaseUrl() + String.format(ApiSubUrl, apiUrl), HttpMethod.POST, request,
                new ParameterizedTypeReference<List<NowSessionsInfoVo>>() {});

        return response.getBody();
    }

    public Boolean updateNetworkTopology(List<TopologyVo> topologyVos) {
        String apiUrl = "/topology/snmp/update";

        RestTemplate restTemplate = getRestTemplate();

        HttpHeaders requestHeaders = getRequestHeader();

        HttpEntity<Object> request = new HttpEntity<Object>(
                JsonConverter.convertObjectToJsonString(topologyVos, false),
                requestHeaders);
        ResponseEntity<Boolean> response = restTemplate.exchange(
                configHolder.getBaseUrl() + String.format(ApiSubUrl, apiUrl), HttpMethod.POST, request,
                new ParameterizedTypeReference<Boolean>() {});

        return response.getBody();
    }

    public List<CollectorVo> getCollectorLists() {
        String apiUrl = "/topology/collector/list";

        RestTemplate restTemplate = getRestTemplate();

        HttpEntity<String> request = getRequestWithCredential();

        ResponseEntity<List<CollectorVo>> response = restTemplate.exchange(
                configHolder.getBaseUrl() + String.format(ApiSubUrl, apiUrl), HttpMethod.GET, request,
                new ParameterizedTypeReference<List<CollectorVo>>() {});

        return response.getBody();
    }

    public List<TopologyVo> getFirewallZoneFromCollector(List<CollectorVo> collectors) {
        String apiUrl = "/gather/firewall";

        RestTemplate restTemplate = getRestTemplate();

        HttpHeaders requestHeaders = getRequestHeader();

        HttpEntity<Object> request = new HttpEntity<Object>(
                JsonConverter.convertObjectToJsonString(collectors, false),
                requestHeaders);
        ResponseEntity<List<TopologyVo>> response = restTemplate.exchange(
                configHolder.getBaseUrl() + String.format(ApiSubUrl, apiUrl), HttpMethod.POST, request,
                new ParameterizedTypeReference<List<TopologyVo>>() {});

        return response.getBody();
    }

    public List<NowSessionsInfoVo> getLegacyFirewallLog(){

        String apiUrl = "/provision/log/now";

        RestTemplate restTemplate = getRestTemplate();

        HttpHeaders requestHeaders = getRequestHeader();

        HttpEntity<Object> request = new HttpEntity<Object>(requestHeaders);
        ResponseEntity<NowSessionsInfoVo[]> response = restTemplate.exchange(
                configHolder.getBaseUrl() + String.format(ApiSubUrl, apiUrl), HttpMethod.GET, request,
                NowSessionsInfoVo[].class);
        List<NowSessionsInfoVo> nowSessionsInfoVos = Arrays.asList(response.getBody());
        log.info("legacy apply log size : {}", nowSessionsInfoVos.size());
        if(!nowSessionsInfoVos.isEmpty()) {
            log.info("session : {}", nowSessionsInfoVos);
        }
        return nowSessionsInfoVos;
    }

    public List<RuleObjectVo> getFirewallRule(String firewallName){
        String apiUrl = String.format("/firewallrule/%s/all/list",firewallName);

        RestTemplate restTemplate = getRestTemplate();

        HttpEntity<String> request = getRequestWithCredential();

        ResponseEntity<List<RuleObjectVo>> response = restTemplate.exchange(
                configHolder.getBaseUrl() + String.format(ApiSubUrl, apiUrl), HttpMethod.GET, request,
                new ParameterizedTypeReference<List<RuleObjectVo>>() {});
        log.debug("response {}",response);
        return response.getBody();
    }

    public List<String> getRuleSetIdsByFirewallRule(String firewallName, String firewallRuleName){

        String apiUrl = String.format("/firewallrule/%s/%s/ruleset/list",firewallName,firewallRuleName);

        RestTemplate restTemplate = getRestTemplate();

        HttpEntity<String> request = getRequestWithCredential();

        ResponseEntity<List<String>> response = restTemplate.exchange(
                configHolder.getBaseUrl() + String.format(ApiSubUrl, apiUrl), HttpMethod.GET, request,
                new ParameterizedTypeReference<List<String>>() {});
        log.debug("response {}",response);
        return response.getBody();
    }


    public FirewallRuleSessionInfoVo searchFirewallRuleSession(String srcAddr, String dstAddr, String dstPort){

        String apiUrl = "/firewallrule/search";

        FirewallRuleSessionInfoVo firewallRuleSessionInfoVo = new FirewallRuleSessionInfoVo(srcAddr, dstAddr, dstPort);

        RestTemplate restTemplate = getRestTemplate();

        HttpHeaders requestHeaders = getRequestHeader();

        HttpEntity<Object> request = new HttpEntity<Object>(
                JsonConverter.convertObjectToJsonString(firewallRuleSessionInfoVo, false), requestHeaders);

        ResponseEntity<FirewallRuleSessionInfoVo> response = restTemplate.exchange(
                configHolder.getBaseUrl() + String.format(ApiSubUrl, apiUrl), HttpMethod.POST, request,
                new ParameterizedTypeReference<FirewallRuleSessionInfoVo>() {
                });

        return response.getBody();
    }

    public List<String> getProvisionRuleUserIDs() {
        String apiUrl = "/provision/rule/userids";

        RestTemplate restTemplate = getRestTemplate();

        HttpEntity<String> request = getRequestWithCredential();

        ResponseEntity<List<String>> response = restTemplate.exchange(
                configHolder.getBaseUrl() + String.format(ApiSubUrl, apiUrl), HttpMethod.GET, request,
                new ParameterizedTypeReference<List<String>>() {});

        return response.getBody();
    }

    public List<NowSessionsInfoVo> getSourceIdsWithFirewalls() {
        String apiUrl = "/provision/rule/addr/src/idwithfirewall";

        RestTemplate restTemplate = getRestTemplate();

        HttpEntity<String> request = getRequestWithCredential();

        ResponseEntity<List<NowSessionsInfoVo>> response = restTemplate.exchange(
                configHolder.getBaseUrl() + String.format(ApiSubUrl, apiUrl), HttpMethod.GET, request,
                new ParameterizedTypeReference<List<NowSessionsInfoVo>>() {});

        return response.getBody();
    }

    public List<FirewallServiceCatalogVo> getServiceCatalogAll() {
        String apiUrl = "/analysis/firewall/servicecatalog/list";

        RestTemplate restTemplate = getRestTemplate();

        HttpEntity<String> request = getRequestWithCredential();

        ResponseEntity<List<FirewallServiceCatalogVo>> response = restTemplate.exchange(
                configHolder.getBaseUrl() + String.format(ApiSubUrl, apiUrl), HttpMethod.GET, request,
                new ParameterizedTypeReference<List<FirewallServiceCatalogVo>>() {});
        log.debug("response {}", response);
        return response.getBody();
    }

    public FirewallRuleSessionInfoVo getSearchProvisionRule(String srcAddr, String dstAddr, String port) {
        String apiUrl = String.format("/provision/rule/search/%s/%s/%s", srcAddr, dstAddr, port);

        RestTemplate restTemplate = getRestTemplate();

        HttpEntity<String> request = getRequestWithCredential();

        ResponseEntity<FirewallRuleSessionInfoVo> response = restTemplate.exchange(
                configHolder.getBaseUrl() + String.format(ApiSubUrl, apiUrl), HttpMethod.GET, request,
                new ParameterizedTypeReference<FirewallRuleSessionInfoVo>() {});

        return response.getBody();
    }

    public List<NowSessionsInfoVo> getSessionRuleInfos(List<NowSessionsInfoVo> nowSessinInfoVos) {

        String apiUrl = "/provision/rule/sessionruleinfo";

        RestTemplate restTemplate = getRestTemplate();

        HttpHeaders requestHeaders = getRequestHeader();

        HttpEntity<Object> request = new HttpEntity<Object>(
                JsonConverter.convertObjectToJsonString(nowSessinInfoVos, false),
                requestHeaders);

        ResponseEntity<List<NowSessionsInfoVo>> response = restTemplate.exchange(
                configHolder.getBaseUrl() + String.format(ApiSubUrl, apiUrl), HttpMethod.POST, request,
                new ParameterizedTypeReference<List<NowSessionsInfoVo>>() {});

        return response.getBody();
    }


    public boolean createUser(UserInfoVo userInfoVo) {

        String apiUrl = "/users";

        RestTemplate restTemplate = getRestTemplate();

        HttpHeaders requestHeaders = getRequestHeader();

        HttpEntity<Object> request = new HttpEntity<Object>(
                JsonConverter.convertObjectToJsonString(userInfoVo, false),
                requestHeaders);

        ResponseEntity<UserInfoVo> response = restTemplate.exchange(
                configHolder.getBaseUrl() + String.format(ApiSubUrl, apiUrl), HttpMethod.POST, request,
                new ParameterizedTypeReference<UserInfoVo>() {});

        return response.getStatusCode().is2xxSuccessful();
    }


    public boolean createRuleAddressDetail(List<RuleAddressDetailInfoVo> infoVos) {

        String apiUrl = "/ruledetail/entries";

        RestTemplate restTemplate = getRestTemplate();

        HttpHeaders requestHeaders = getRequestHeader();

        HttpEntity<Object> request = new HttpEntity<Object>(
                JsonConverter.convertObjectToJsonString(infoVos, false),
                requestHeaders);

        ResponseEntity<List<RuleAddressDetailInfoVo>> response = restTemplate.exchange(
                configHolder.getBaseUrl() + String.format(ApiSubUrl, apiUrl), HttpMethod.POST, request,
                new ParameterizedTypeReference<List<RuleAddressDetailInfoVo>>() {});

        return response.getStatusCode().is2xxSuccessful();
    }

    public List<RuleAddressDetailInfoVo> getRuleAddressDetail(String address) {

        String apiUrl = "/ruledetail/entry/" + address;

        RestTemplate restTemplate = getRestTemplate();

        HttpHeaders requestHeaders = getRequestHeader();

        HttpEntity<Object> request = new HttpEntity<Object>(requestHeaders);

        ResponseEntity<List<RuleAddressDetailInfoVo>> response = restTemplate.exchange(
                configHolder.getBaseUrl() + String.format(ApiSubUrl, apiUrl), HttpMethod.GET, request,
                new ParameterizedTypeReference<List<RuleAddressDetailInfoVo>>() {});

        if (!response.getStatusCode().is2xxSuccessful()) {
            return Lists.newArrayList();
        }

        return response.getBody();
    }

    public List<NowSessionsInfoVo> updateUserRuleAddress(List<NowSessionsInfoVo> nowSessinInfoVos) {

        String apiUrl = "/provision/rule/addr/userid/update";

        RestTemplate restTemplate = getRestTemplate();

        HttpHeaders requestHeaders = getRequestHeader();

        HttpEntity<Object> request = new HttpEntity<Object>(
                JsonConverter.convertObjectToJsonString(nowSessinInfoVos, false), requestHeaders);

        ResponseEntity<List<NowSessionsInfoVo>> response = restTemplate.exchange(
                String.format("%s%s.json", configHolder.getBaseUrl(), apiUrl), HttpMethod.POST, request,
                new ParameterizedTypeReference<List<NowSessionsInfoVo>>() {});

        return response.getBody();
    }
}